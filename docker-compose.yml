name: "ai-workshop-stack"

services:
  postgres:
    image: postgres:14-alpine
    restart: on-failure:5
    container_name: ai-workshop-postgres
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    
  minioS3:
    image: minio/minio:latest
    restart: on-failure:5
    container_name: ai-workshop-minioS3
    env_file: .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata:/data
    command: minio server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minioS3:9000/minio/health/ready"]
      interval: 5s
      timeout: 10s
      retries: 3

  redis:
    image: redis:8.2-alpine
    restart: on-failure:5
    container_name: ai-workshop-redis
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    restart: on-failure:3
    container_name: ai-workshop-backend
    ports:
      - "8000:8000"
    command: sh -c "poetry run alembic upgrade head && poetry run uvicorn main:app --host 0.0.0.0 --port 8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend:8000/api/health"]
      interval: 10s
      timeout: 10s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minioS3:
        condition: service_healthy
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: on-failure
    container_name: ai-workshop-frontend
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://frontend:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      backend:
        condition: service_healthy

  nginx:
    build: 
      context: ./nginx
      dockerfile: Dockerfile
    restart: on-failure
    container_name: ai-workshop-nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy

  promtail:
    image: grafana/promtail:latest
    container_name: ai-workshop-promtail
    ports:
      - "9080:9080"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail-config.yaml:/etc/promtail/config.yml
    command: "-log.level=warn -config.file=/etc/promtail/config.yml"
    privileged: true

  loki:
    image: grafana/loki:latest
    container_name: ai-workshop-loki
    ports:
      - "3100:3100"
    command: "-log.level=warn -config.file=/etc/loki/local-config.yaml"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml

  prometheus:
    image: prom/prometheus:v2.47.2
    restart: on-failure
    container_name: ai-workshop-prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --log.level=error
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheusdata:/prometheus
  
  grafana:
    image: grafana/grafana:10.2.0
    restart: on-failure
    container_name: ai-workshop-grafana
    env_file: .env
    ports:
      - "3001:3001"
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_SERVER_HTTP_PORT: ${GF_SERVER_HTTP_PORT}
      GF_LOG_LEVEL: warn
      GF_SERVER_SERVE_FROM_SUB_PATH: true
      GF_SERVER_ROOT_URL: /monitoring
    volumes:
      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafanadata:/var/lib/grafana

volumes:
  miniodata:
  redisdata:
  pgdata:
  grafanadata:
  prometheusdata: